{"ast":null,"code":"//import { useReducer } from 'react';\nimport { UPDATE_PRODUCTS, ADD_TO_CART, UPDATE_CART_QUANTITY, REMOVE_FROM_CART, ADD_MULTIPLE_TO_CART, UPDATE_CATEGORIES, UPDATE_CURRENT_CATEGORY, CLEAR_CART, TOGGLE_CART } from './actions';\n\n//every reducer needs initial state\n// https://redux.js.org/tutorials/fundamentals/part-3-state-actions-reducers\nconst initialState = {\n  products: [],\n  cartOpen: false,\n  cart: [],\n  categories: [],\n  currentCategory: ''\n};\nexport const reducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    // Returns a copty of state with an update products array. We use the action.products property and spread it's contents into the new array\n    case UPDATE_PRODUCTS:\n      return {\n        ...state,\n        //return copy of the state\n        products: [...action.products] //and return products which is the copy of products that is action is applied\n      };\n\n    case ADD_TO_CART:\n      return {\n        ...state,\n        cartOpen: true,\n        cart: [...state.cart, action.product]\n      };\n    case ADD_MULTIPLE_TO_CART:\n      return {\n        ...state,\n        cart: [...state.cart, ...action.products]\n      };\n    // Returns a copty of state, sets the carOpen to true and maps through the itmes in the cart,\n    //If the item's 'id' matches the 'id' that was rpovided in the action.payload, we update the purchase quanitity\n    case UPDATE_CART_QUANTITY:\n      return {\n        ...state,\n        cartOpen: true,\n        cart: state.cart.map(product => {\n          if (action._id === product._id) {\n            product.purchaseQuantity = action.purchaseQuantity;\n          }\n          return product;\n        })\n      };\n\n    // first we iterate through each item in the car and check to see if the product._id matches the action._id, if so we remove it from our car and set the updated state to a\n    // variable\n    case REMOVE_FROM_CART:\n      let newState = state.cart.filter(product => {\n        return product._id !== action._id;\n      });\n      return {\n        //check if the cart is empty, if cart is empty (state.length less than zero, then cart empty so it's false)\n        ...state,\n        cartOpen: newState.length > 0,\n        cart: newState\n      };\n    case CLEAR_CART:\n      return {\n        ...state,\n        cartOpen: false,\n        cart: []\n      };\n    case TOGGLE_CART:\n      return {\n        ...state,\n        cartOpen: !state.cartOpen\n      };\n    case UPDATE_CATEGORIES:\n      return {\n        ...state,\n        categories: [...action.categories]\n      };\n    case UPDATE_CURRENT_CATEGORY:\n      return {\n        ...state,\n        currentCategory: action.currentCategory\n      };\n    default:\n      return state;\n  }\n};\n\n/*export function useProductReducer(initialState) {\n  return useReducer(reducer, initialState);\n}*/\nexport default reducer;","map":{"version":3,"names":["UPDATE_PRODUCTS","ADD_TO_CART","UPDATE_CART_QUANTITY","REMOVE_FROM_CART","ADD_MULTIPLE_TO_CART","UPDATE_CATEGORIES","UPDATE_CURRENT_CATEGORY","CLEAR_CART","TOGGLE_CART","initialState","products","cartOpen","cart","categories","currentCategory","reducer","state","arguments","length","undefined","action","type","product","map","_id","purchaseQuantity","newState","filter"],"sources":["G:/Web_Development/Git/bootcamp/Module22/22-State/02-Challenge/Develop/client/src/utils/reducers.js"],"sourcesContent":["//import { useReducer } from 'react';\nimport {\n  UPDATE_PRODUCTS,\n  ADD_TO_CART,\n  UPDATE_CART_QUANTITY,\n  REMOVE_FROM_CART,\n  ADD_MULTIPLE_TO_CART,\n  UPDATE_CATEGORIES,\n  UPDATE_CURRENT_CATEGORY,\n  CLEAR_CART,\n  TOGGLE_CART,\n} from './actions';\n\n//every reducer needs initial state\n// https://redux.js.org/tutorials/fundamentals/part-3-state-actions-reducers\nconst initialState = {\n  products: [],\n  cartOpen: false,\n  cart: [],\n  categories: [],\n  currentCategory: ''\n}\n\nexport const reducer = (state = initialState, action) => {\n  switch (action.type) {\n    // Returns a copty of state with an update products array. We use the action.products property and spread it's contents into the new array\n    case UPDATE_PRODUCTS:\n      return {\n        ...state, //return copy of the state\n        products: [...action.products], //and return products which is the copy of products that is action is applied\n      };\n\n    case ADD_TO_CART:\n      return {\n        ...state,\n        cartOpen: true,\n        cart: [...state.cart, action.product],\n      };\n\n    case ADD_MULTIPLE_TO_CART:\n      return {\n        ...state,\n        cart: [...state.cart, ...action.products],\n      };\n    // Returns a copty of state, sets the carOpen to true and maps through the itmes in the cart,\n    //If the item's 'id' matches the 'id' that was rpovided in the action.payload, we update the purchase quanitity\n    case UPDATE_CART_QUANTITY:\n      return {\n        ...state,\n        cartOpen: true,\n        cart: state.cart.map((product) => {\n          if (action._id === product._id) {\n            product.purchaseQuantity = action.purchaseQuantity;\n          }\n          return product;\n        }),\n      };\n\n    // first we iterate through each item in the car and check to see if the product._id matches the action._id, if so we remove it from our car and set the updated state to a\n    // variable\n    case REMOVE_FROM_CART:\n      let newState = state.cart.filter((product) => {\n        return product._id !== action._id;\n      });\n\n      return { //check if the cart is empty, if cart is empty (state.length less than zero, then cart empty so it's false)\n        ...state,\n        cartOpen: newState.length > 0,\n        cart: newState,\n      };\n\n    case CLEAR_CART:\n      return {\n        ...state,\n        cartOpen: false,\n        cart: [],\n      };\n\n    case TOGGLE_CART:\n      return {\n        ...state,\n        cartOpen: !state.cartOpen,\n      };\n\n    case UPDATE_CATEGORIES:\n      return {\n        ...state,\n        categories: [...action.categories],\n      };\n\n    case UPDATE_CURRENT_CATEGORY:\n      return {\n        ...state,\n        currentCategory: action.currentCategory,\n      };\n\n    default:\n      return state;\n  }\n};\n\n/*export function useProductReducer(initialState) {\n  return useReducer(reducer, initialState);\n}*/\nexport default reducer;\n"],"mappings":"AAAA;AACA,SACEA,eAAe,EACfC,WAAW,EACXC,oBAAoB,EACpBC,gBAAgB,EAChBC,oBAAoB,EACpBC,iBAAiB,EACjBC,uBAAuB,EACvBC,UAAU,EACVC,WAAW,QACN,WAAW;;AAElB;AACA;AACA,MAAMC,YAAY,GAAG;EACnBC,QAAQ,EAAE,EAAE;EACZC,QAAQ,EAAE,KAAK;EACfC,IAAI,EAAE,EAAE;EACRC,UAAU,EAAE,EAAE;EACdC,eAAe,EAAE;AACnB,CAAC;AAED,OAAO,MAAMC,OAAO,GAAG,SAAAA,CAAA,EAAkC;EAAA,IAAjCC,KAAK,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGR,YAAY;EAAA,IAAEW,MAAM,GAAAH,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EAClD,QAAQC,MAAM,CAACC,IAAI;IACjB;IACA,KAAKrB,eAAe;MAClB,OAAO;QACL,GAAGgB,KAAK;QAAE;QACVN,QAAQ,EAAE,CAAC,GAAGU,MAAM,CAACV,QAAQ,CAAC,CAAE;MAClC,CAAC;;IAEH,KAAKT,WAAW;MACd,OAAO;QACL,GAAGe,KAAK;QACRL,QAAQ,EAAE,IAAI;QACdC,IAAI,EAAE,CAAC,GAAGI,KAAK,CAACJ,IAAI,EAAEQ,MAAM,CAACE,OAAO;MACtC,CAAC;IAEH,KAAKlB,oBAAoB;MACvB,OAAO;QACL,GAAGY,KAAK;QACRJ,IAAI,EAAE,CAAC,GAAGI,KAAK,CAACJ,IAAI,EAAE,GAAGQ,MAAM,CAACV,QAAQ;MAC1C,CAAC;IACH;IACA;IACA,KAAKR,oBAAoB;MACvB,OAAO;QACL,GAAGc,KAAK;QACRL,QAAQ,EAAE,IAAI;QACdC,IAAI,EAAEI,KAAK,CAACJ,IAAI,CAACW,GAAG,CAAED,OAAO,IAAK;UAChC,IAAIF,MAAM,CAACI,GAAG,KAAKF,OAAO,CAACE,GAAG,EAAE;YAC9BF,OAAO,CAACG,gBAAgB,GAAGL,MAAM,CAACK,gBAAgB;UACpD;UACA,OAAOH,OAAO;QAChB,CAAC;MACH,CAAC;;IAEH;IACA;IACA,KAAKnB,gBAAgB;MACnB,IAAIuB,QAAQ,GAAGV,KAAK,CAACJ,IAAI,CAACe,MAAM,CAAEL,OAAO,IAAK;QAC5C,OAAOA,OAAO,CAACE,GAAG,KAAKJ,MAAM,CAACI,GAAG;MACnC,CAAC,CAAC;MAEF,OAAO;QAAE;QACP,GAAGR,KAAK;QACRL,QAAQ,EAAEe,QAAQ,CAACR,MAAM,GAAG,CAAC;QAC7BN,IAAI,EAAEc;MACR,CAAC;IAEH,KAAKnB,UAAU;MACb,OAAO;QACL,GAAGS,KAAK;QACRL,QAAQ,EAAE,KAAK;QACfC,IAAI,EAAE;MACR,CAAC;IAEH,KAAKJ,WAAW;MACd,OAAO;QACL,GAAGQ,KAAK;QACRL,QAAQ,EAAE,CAACK,KAAK,CAACL;MACnB,CAAC;IAEH,KAAKN,iBAAiB;MACpB,OAAO;QACL,GAAGW,KAAK;QACRH,UAAU,EAAE,CAAC,GAAGO,MAAM,CAACP,UAAU;MACnC,CAAC;IAEH,KAAKP,uBAAuB;MAC1B,OAAO;QACL,GAAGU,KAAK;QACRF,eAAe,EAAEM,MAAM,CAACN;MAC1B,CAAC;IAEH;MACE,OAAOE,KAAK;EAChB;AACF,CAAC;;AAED;AACA;AACA;AACA,eAAeD,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}